buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.29")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4+")
        classpath('org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3')
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
}
apply plugin: 'io.spring.javaformat'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.sonarqube'

group = "com.blogspot.ostas.apps.cloud"
version = "0.0.0.1"

checkstyle {
    toolVersion = "8.45.1"
}
repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation("org.assertj:assertj-core:3.11.1")

    checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.29")
}

application {
    mainClass = 'my.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

artifactory {
    contextUrl = System.getenv("ARTIFACTORY_CONTEXT_URL")
    publish {
        repository {
            repoKey = 'repo1'
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
            maven = true
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = 'default-maven-virtual'
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
            maven = true
        }
    }
}
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}
task testJar(type: Jar) {
    from sourceSets.test.output
    archiveClassifier = "tests"
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact testJar
        }
    }
}
pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    ignoreFailures = false
    rulesMinimumPriority = 5
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.projectKey", "myproject1"
        property 'sonar.login', System.getenv("SONAR_TOKEN")
    }
}
